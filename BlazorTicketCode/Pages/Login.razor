
@page "/login"
@using TicketToCode.Core.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6"> 
            <div class="bg-light p-4 rounded-4 shadow">


                <h2 class="text-center">Login!</h2>
                <EditForm Model="@user" OnValidSubmit="LoginUser" class="row g-3">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>

                    <div class="mb-4">
                        <label for="Username">Username:</label>
                        <InputText id="Username" @bind-Value="@user.Username" class="form-control" required></InputText>
                    </div>

                    <div class="mb-4">
                        <label for="Password">Password:</label>
                        <InputText id="Password" type="password" @bind-Value="@user.PasswordHash" class="form-control" required></InputText>
                    </div>
                    <div class="d-flex flex-column align-items-center mb-4">
                        <button type="submit" class="btn btn-success w-50">Sign in</button>
                        <button @onclick="NavigateToSignup" class="btn btn-outline-primary btn-sm mt-4 w-auto">Don't have an account? Sign up here!</button>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
            </div>
        </div>
    </div>
</div>
@code {

    private void NavigateToSignup()
    {
        // Navigera till inloggningssidan
        Navigation.NavigateTo("/signup");
    }
    private User user = new User();
    private string errorMessage = string.Empty;

    private async Task LoginUser()
    {
        try
        {
            var request = new { Username = user.Username, Password = user.PasswordHash };
            var response = await Http.PostAsJsonAsync("auth/login", request);

            if (response.IsSuccessStatusCode)
            {
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (loginResponse != null)
                {
                    Console.WriteLine($"Logged in user: {loginResponse.Username}, Role: {loginResponse.Role}");

                    if (loginResponse.Role.Trim().ToLower() == "admin") // Kontrollera case och whitespace
                    {
                        Navigation.NavigateTo("/admin/home");
                    }
                    else
                    {
                        Navigation.NavigateTo("/events");
                    }
                }
            }

            else
            {
                errorMessage = "Felaktigt användarnamn eller lösenord.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ett fel uppstod vid inloggning.";
        }
    }

    private class LoginResponse
    {
        public string Username { get; set; }
        public string Role { get; set; }
    }
}

