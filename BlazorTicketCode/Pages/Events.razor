@page "/events/{category?}"
@inject HttpClient Http
@inject NavigationManager Navigation

<h1>@(selectedCategory != null ? $"{selectedCategory} Events" : "All Events")</h1>

<div class="button-container">
    <button class="filter-btn @(selectedCategory == null ? "active" : "")" @onclick="() => NavigateToCategory(null)">All</button>
    <button class="filter-btn @(selectedCategory == EventType.Concert ? "active" : "")" @onclick="() => NavigateToCategory(EventType.Concert)">Concert</button>
    <button class="filter-btn @(selectedCategory == EventType.Festival ? "active" : "")" @onclick="() => NavigateToCategory(EventType.Festival)">Festival</button>
    <button class="filter-btn @(selectedCategory == EventType.Theatre ? "active" : "")" @onclick="() => NavigateToCategory(EventType.Theatre)">Theatre</button>
    <button class="filter-btn @(selectedCategory == EventType.Other ? "active" : "")" @onclick="() => NavigateToCategory(EventType.Other)">Other</button>
</div>


<div class="button-container">
    <button class="sort-btn" @onclick="@(async () => await SortEvents("asc"))">Upcoming Soon </button>
    <button class="sort-btn" @onclick="@(async () => await SortEvents("desc"))">Farthest Away</button>
</div>



@if (filteredEvents == null)
{
    <p><em>Laddar...</em></p>
}
else if (!filteredEvents.Any())
{
    <p>No match.</p>
}
else
{
    <div class="events-container">
        @foreach (var eventItem in filteredEvents)
        {
            <div class="event-card" @onclick="() => ToggleEventDetails(eventItem)">
                <h4>@eventItem.Name</h4>
                <p>@eventItem.Start.ToString("f")</p>
                @if (eventItem.ShowDetails)
                {
                    <div class="event-details">
                        <p>@eventItem.Description</p>
                        <p>@eventItem.Price</p>
                        <div class="event-footer">
                            <a href='https://localhost:7075/booking'> <button class="btn-register">Tickets</button></a>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter] public string Category { get; set; }
    [Parameter][SupplyParameterFromQuery] public string Search { get; set; }

    private List<EventResponse> events;
    private List<EventResponse> filteredEvents;
    private string sortOrder = "asc";
    private EventType? selectedCategory = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents(sortOrder);
        HandleCategoryFromUrl();
    }

    protected override async Task OnParametersSetAsync()
    {
        HandleCategoryFromUrl();
        ApplySearch();
    }

    private void HandleCategoryFromUrl()
    {
        if (!string.IsNullOrEmpty(Category) && Enum.TryParse(Category, true, out EventType parsedCategory))
        {
            selectedCategory = parsedCategory;
        }
        else
        {
            selectedCategory = null;
        }

        FilterEvents(selectedCategory);
    }

    private async Task LoadEvents(string sortOrder)
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7206/events?sortOrder={sortOrder}");
            if (response.IsSuccessStatusCode)
            {
                events = await response.Content.ReadFromJsonAsync<List<EventResponse>>();
                FilterEvents(selectedCategory);
                ApplySearch();
            }
        }
        catch (Exception)
        {
        }
    }

    private async Task SortEvents(string order)
    {
        sortOrder = order;
        await LoadEvents(order);
    }

    private void FilterEvents(EventType? category)
    {
        selectedCategory = category;

        if (category == null)
        {
            filteredEvents = new List<EventResponse>(events);
        }
        else
        {
            filteredEvents = events?.Where(e => e.Type == category).ToList();
        }

        ApplySearch();
    }

    private void ApplySearch()
    {
        if (string.IsNullOrWhiteSpace(Search))
        {
            return;
        }
        var searchTerm = Search.ToLower();
        filteredEvents = filteredEvents?
            .Where(e => e.Name.ToLower().Contains(searchTerm) ||
                       e.Description.ToLower().Contains(searchTerm))
            .ToList();
    }

    private void NavigateToCategory(EventType? category)
    {
        var baseUrl = category == null ? "/events" : $"/events/{category}";
        var searchParam = !string.IsNullOrEmpty(Search) ? $"?search={Uri.EscapeDataString(Search)}" : "";
        Navigation.NavigateTo($"{baseUrl}{searchParam}");
    }

    private void ToggleEventDetails(EventResponse eventItem)
    {
        if (!eventItem.ShowDetails)
        {
            foreach (var ev in filteredEvents)
            {
                if (ev != eventItem)
                {
                    ev.ShowDetails = false;
                }
            }
            eventItem.ShowDetails = true;
        }
    }

    public class EventResponse
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public EventType Type { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public int MaxAttendees { get; set; }
        public bool ShowDetails { get; set; }
        public decimal Price { get; set; }
    }

    public enum EventType
    {
        Concert,
        Festival,
        Theatre,
        Other
    }
}
