@page "/events" 
@inject HttpClient Http

<h3></h3>
<div class="filters">
    <button @onclick="@(async () => await SortEvents("asc"))">Närmast i tid</button>
    <button @onclick="@(async () => await SortEvents("desc"))">Längst bort i tid</button>

</div>

@if (events == null)
{
    <p><em>Laddar...</em></p>
}
else
{
    <div class="events-container">
        @foreach (var eventItem in events)
        {
            <div class="event-card" @onclick="() => ToggleEventDetails(eventItem)">
                <h4>@eventItem.Name</h4>
                <p>@eventItem.Start.ToString("f")</p>
                @if (eventItem.ShowDetails)
                {
                    <div class="event-details">
                        <p>@eventItem.Description</p>
                        <div class="event-footer">
                            <a href='https://localhost:7075/events'> <button class="btn-register">Biljetter</button></a> <!-- Replace link -->
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private List<EventResponse> events;

    private string sortOrder = "asc";

    protected override async Task OnInitializedAsync()
    {
        
            await LoadEvents(sortOrder);
    }

    private async Task LoadEvents(string sortOrder)
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7206/events?sortOrder={sortOrder}");
            if (response.IsSuccessStatusCode)
            {
                events = await response.Content.ReadFromJsonAsync<List<EventResponse>>();
            }
        }
        catch (Exception)
        {
        }
    }

    private async Task SortEvents(string order)
    {
        sortOrder = order;
        await LoadEvents(order); 
    }

    private void ToggleEventDetails(EventResponse eventItem)
    {
        if (!eventItem.ShowDetails)
        {
            foreach (var ev in events)
            {
                if (ev != eventItem)
                {
                    ev.ShowDetails = false;
                }
            }
            eventItem.ShowDetails = true;
        }
    }
    
    private void CloseDetails(EventResponse eventItem)
    {
        eventItem.ShowDetails = false;
    }

    public class EventResponse
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public EventType Type { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public int MaxAttendees { get; set; }
        public bool ShowDetails { get; set; }
    }

    public enum EventType
    {
        Concert,
        Festival,
        Theatre,
        Other
    }
}