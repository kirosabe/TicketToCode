@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using TicketToCode.Core.Models;
@page "/booking"
@attribute [Authorize(Roles = "User")]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject BookingState BookingState
@inject AuthStateService Auth

<PageTitle>Book now</PageTitle>

<div class="booking-container">
	<h1>Book your event with us</h1>

	<div class="form-container">
		<EditForm Model="@booking" OnValidSubmit="SubmitBooking">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="mb-3">
				<label for="FirstName" class="form-label">First name:</label>
				<InputText id="FirstName" @bind-Value="@booking.FirstName" class="form-control" required></InputText>
			</div>
			<div class="mb-3">
				<label for="LastName" class="form-label">Last name:</label>
				<InputText id="LastName" @bind-Value="@booking.LastName" class="form-control" required></InputText>
			</div>
			<div class="mb-3">
				<label for="Phone" class="form-label">Phone number:</label>
				<InputText id="Phone" @bind-Value="@booking.Phone" class="form-control" required></InputText>
			</div>
			<div class="mb-3">
				<label for="Email" class="form-label">Email:</label>
				<InputText id="Email" @bind-Value="@booking.Email" class="form-control" required></InputText>
			</div>
			<div class="mb-3">
				<label for="Event" class="form-label">Event:</label>
				<InputSelect id="Event" @bind-Value="@booking.EventId" class="form-control" required>
					<option value="">Select an event</option>
					@foreach (var ev in events)
					{
						<option value="@ev.Id">@ev.Name</option>
					}
				</InputSelect>
			</div>
			<div class="mb-3">
				<label for="Tickets" class="form-label">Number of tickets</label>
				<InputNumber id="Tickets" @bind-Value="@booking.Tickets" class="form-control" required></InputNumber>
			</div>
			<div class="mb-3">
				<label for="PaymentMethod" class="form-label">Payment method:</label>
				<InputSelect id="PaymentMethod" @bind-Value="@booking.PaymentMethod" class="form-control" required>
					<option value="">Select payment method</option>
					@foreach (var method in Enum.GetValues<PaymentMethod>())
					{
						<option value="@method">@method</option>
					}
				</InputSelect>
			</div>
			<button type="submit" class="btn btn-primary">Book your spot</button>
		</EditForm>
	</div>
</div>

@code {
	private TicketToCode.Core.Models.Booking booking = new(); //Model for booking
	private List<EventModel> events = new List<EventModel>();

	//Model for events to work with API
	private class EventModel
	{
		public int Id { get; set; }
		public string Name { get; set; } = string.Empty;
	}
	protected override async Task OnInitializedAsync()
	{
		try
		{
			var response = await Http.GetAsync("https://localhost:7206/events");
			if (response.IsSuccessStatusCode)
			{
				events = await response.Content.ReadFromJsonAsync<List<EventModel>>() ?? new List<EventModel>();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching events: {ex.Message}");
		}
	}
	private async Task SubmitBooking()
	{
		var username = await Auth.GetUsername();

		// Create the request body for API with username
		var requestBody = new
		{
			booking.EventId,
			Username = username,
			booking.FirstName,
			booking.LastName,
			booking.Phone,
			booking.Email,
			booking.Tickets,
			booking.PaymentMethod
		};

		var response = await Http.PostAsJsonAsync("https://localhost:7206/bookings", requestBody);

		if (response.IsSuccessStatusCode)
		{
			BookingState.CurrentBooking = booking;
			Navigation.NavigateTo("/booking/confirmation");
		}
		else
		{
			Console.WriteLine("Booking failed");
		}
	}
}
