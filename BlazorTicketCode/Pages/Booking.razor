@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@page "/booking"
@inject HttpClient Http

<PageTitle>Book now</PageTitle>

<h1>Book now</h1>

<EditForm Model="@booking">

	<DataAnnotationsValidator />
	<ValidationSummary />

    <div class="mb-3">
        <label for="FirstName" class="form-label">First name:</label>
        <InputText id="FirstName" @bind-Value="@booking.FirstName" class="form-control" required></InputText>
    </div>
    <div class="mb-3">
        <label for="LastName" class="form-label">Last name:</label>
        <InputText id="LastName" @bind-Value="@booking.LastName" class="form-control" required></InputText>
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">Email:</label>
        <InputText id="Email" @bind-Value="@booking.Email" class="form-control" required></InputText>
    </div>

    <div class="mb-3">
        <label for="Event" class="form-label">Event:</label>
        <InputSelect id="Event" @bind-Value="@booking.EventId" class="form-control" required>
            <option value="">Select an event</option>
            @foreach (var ev in events)
            {
                <option value="@ev.Id">@ev.Name</option>
            }
        </InputSelect>
    </div>



    <button type="submit" class="btn btn-primary">To payment</button>
</EditForm>


@code {
    private BookingModel booking = new BookingModel();
    private List<EventModel> events = new List<EventModel>();

    private class BookingModel
    {
        public int EventId { get; set; }
		public string FirstName { get; set; } = string.Empty;
		public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }
    private class EventModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7206/events");
            if (response.IsSuccessStatusCode)
            {
                events = await response.Content.ReadFromJsonAsync<List<EventModel>>() ?? new List<EventModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
        }
    }
}
