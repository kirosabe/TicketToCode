@page "/user/home"
@attribute [Authorize(Roles = "User")]
@inject HttpClient Http
@inject AuthStateService Auth
@inject IJSRuntime JSRuntime
<PageTitle>My homepage</PageTitle>
<section class="container">
    <h1>Your tickets</h1>
    @if (!string.IsNullOrEmpty(feedbackMessage))
    {
        <div class="alert alert-success">@feedbackMessage</div>
    }
    @if (bookings is null)
    {
        <p> Loading...</p>
    }
    else if (!bookings.Any())
    {
        <p>You have no bookings yet.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var booking in bookings)
            {
                <li class="list-group-item">
                    <div class="row">
                        <article class="card fl-left">
                            <section class="date">
                                <time datetime="@booking.Start.ToString("yyyy-MM-dd")">
                                    <span>@booking.Start.Day</span>
                                    <span>@booking.Start.ToString("MMM").ToLower()</span>
                                </time>
                            </section>
                            <section class="card-cont">
                                <small>@booking.FirstName @booking.LastName</small>
                                <h3>@booking.EventName</h3>
                                <div class="even-date">
                                    <i class="fa fa-calendar"></i>
                                    <time>
                                        <span>@booking.Start.ToString("dddd dd MMMM yyyy")</span>
                                        <span>@booking.Start.ToString("hh:mm tt") to @(booking.Start.AddHours(4).ToString("hh:mm tt"))</span> <!-- Assuming event lasts 4 hours -->
                                    </time>
                                </div>
                                <div class="even-info">
                                    <i class="fa fa-map-marker"></i>
                                    <p>
                                        A Golden Experience Awaits
                                    </p>
                                </div>
                                <a @onclick="() => ConfirmCancel(booking.BookingId)">Cancel</a>
                            </section>
                        </article>
                    </div>
                </li>
            }
        </ul>
    }
</section>

@code {
    private List<UserBookingDto>? bookings;
    private string? feedbackMessage;

    protected override async Task OnInitializedAsync()
    {
        // Gets Id of currently logged in user by username
        var username = await Auth.GetUsername();
        if (!string.IsNullOrEmpty(username))
        {
            bookings = await Http.GetFromJsonAsync<List<UserBookingDto>>($"users/{username}/bookings");
        }
    }
	// Asks user to comfirm cancel before canceling
    private async Task ConfirmCancel(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this booking?");
        if (confirmed)
        {
            await CancelBooking(id);
        }
    }
    // Cancels booking and removes from list
    private async Task CancelBooking(int id)
    {
        var response = await Http.DeleteAsync($"bookings/{id}/cancel");
        if (response.IsSuccessStatusCode)
        {
            var bookingToRemove = bookings.FirstOrDefault(b => b.BookingId == id);
            if (bookingToRemove != null)
            {
                bookings.Remove(bookingToRemove);
                feedbackMessage = "Booking successfully canceled!";
            }
        }
        else
        {
            feedbackMessage = "Failed to cancel booking. Please try again.";
        }
    }

    public class UserBookingDto
    {
		public int BookingId { get; set; }
        public string? EventName { get; set; }
        public int Tickets { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public DateTime Start { get; set; }
    }
}