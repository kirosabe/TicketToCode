@inject AuthStateService Auth
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@implements IDisposable
<div class="nav-top-row px-4">
    <div class="container-fluid">
        <nav class="d-flex align-items-center w-100 justify-content-end">
     <h1>Golden Ticket</h1>
            
            <div class="d-flex ms-auto">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="">
                        <span class="bi bi-house-door-fill-nav-menu"></span> Home
                    </NavLink>
                </div>
                 <div class="nav-item px-3">
                    <NavLink class="nav-link" href="events">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-heart" viewBox="0 0 16 16">
                            <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143q.09.083.176.171a3 3 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15" />
                        </svg> Events
                    </NavLink>
                </div>
                <AuthorizeView Roles="User">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="booking">
                        <span class="bi bi-plus-square-fill-nav-menu"></span> Tickets
                  </NavLink>
                </div>
            </div>
                   
           

            <!-- Profile dropdown menu (Hålls också till höger) -->
            <div class="nav-item px-3 dropdown">
                <button class="btn btn-outline-light dropdown-toggle" type="button" @onclick="ToggleDropdown">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                         class="bi bi-person-fill" viewBox="0 0 16 16">
                        <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
                    </svg>
                </button>

                @if (showDropdown)
                {
                    <div class="dropdown-menu show">
                        <a class="dropdown-item" href="/user/home">Profile</a>

                        @if (isLoggedIn)
                        {
                            <button class="dropdown-item" @onclick="Logout">Sign out</button>
                        }
                        else
                        {
                            <button class="dropdown-item" @onclick="@(() => Navigation.NavigateTo("/login"))">Sign in</button>
                        }
                    </div>
                }
            </div>
        </nav>
    </div>
</div>

               

            
@code {
    private bool showDropdown = false;
    private bool isLoggedIn = false;

    // Checks if User is logged in or not on start
    protected override async Task OnInitializedAsync()
    {
        Auth.AuthStateChanged += OnAuthStateChanged;
        await UpdateLoginStatus();
    }
	// Triggers when auth state changes
    private void OnAuthStateChanged()
    {
        _ = InvokeAsync(UpdateLoginStatus);
    }
	// Method to update login status and show dropdown menu
    private async Task UpdateLoginStatus()
    {
        var username = await Auth.GetUsername();
        isLoggedIn = !string.IsNullOrEmpty(username);
        StateHasChanged();
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }
	// Logout method to sign out user and update UI and AuthState
    private async Task Logout()
    {
        await Auth.Logout();
        if (AuthProvider is CustomAuthenticationStateProvider custom)
        {
            custom.NotifyAuthenticationChanged();
        }
        Navigation.NavigateTo("/login");
    }
    // Dispose method to remove event listener
    public void Dispose()
    {
        Auth.AuthStateChanged -= OnAuthStateChanged;
    }
}