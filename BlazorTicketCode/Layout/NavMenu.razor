@inject AuthStateService Auth
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@implements IDisposable
<div class="nav-top-row px-4">
    <div class="container-fluid">
        <nav class="d-flex align-items-center w-100 justify-content-end">
            <a href=""><h1>Golden Ticket</h1></a>
            <div class="d-flex ms-auto">
                <!-- Sökfält -->
                <div class="search-container ms-auto me-3">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search event..."
                               @bind="searchTerm"
                               @bind:event="oninput"
                               @onkeyup="HandleKeyPress" />
                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <button class="btn btn-outline-light clear-search" @onclick="ClearSearch">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </button>
                        }
                        <button class="btn btn-outline-light" @onclick="SearchEvents">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="">
                        <span class="bi bi-house-door-fill-nav-menu"></span> Home
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="events">
                        <span class="bi bi-plus-square-fill-nav-menu"></span> Events
                    </NavLink>
                </div>

                <AuthorizeView Roles="User">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="booking">
                        <span class="bi bi-plus-square-fill-nav-menu"></span> Tickets
                    </NavLink>
                </div>
                </AuthorizeView>
            </div>

            @* Profile dropdown menu*@
            <div class="nav-item px-3 dropdown" @onclick="ToggleDropdown">
                <button class="btn btn-outline-light dropdown-toggle" type="button">

                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                         class="bi bi-person-fill" viewBox="0 0 16 16">
                        <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
                    </svg>
                </button>

                @if (showDropdown)
                {
                    <div class="dropdown-menu show">
                        <AuthorizeView Roles="User">
                            <a class="dropdown-item" href="/user/home">Profile</a>
                        </AuthorizeView>
                        <AuthorizeView Roles="Admin">
                            <a class="dropdown-item" href="/admin/home">Profile</a>
                        </AuthorizeView>
                        @if (isLoggedIn)
                        {
                            <button class="dropdown-item" @onclick="Logout">Sign out</button>
                        }
                        else
                        {
                            <button class="dropdown-item" @onclick="@(() => Navigation.NavigateTo("/login"))">Sign in</button>
                        }
                    </div>
                }
            </div>
        </nav>
    </div>
</div>
            
@code {
    private bool showDropdown = false;
    private bool isLoggedIn = false;
    private string searchTerm = "";

    // Checks if User is logged in or not on start
    protected override async Task OnInitializedAsync()
    {
        Auth.AuthStateChanged += OnAuthStateChanged;
        await UpdateLoginStatus();
    }
	// Triggers when auth state changes
    private void OnAuthStateChanged()
    {
        InvokeAsync(async () =>
        {
            await UpdateLoginStatus();
            StateHasChanged();
        });
    }
	// Method to update login status and show dropdown menu
    private async Task UpdateLoginStatus()
    {
        var username = await Auth.GetUsername();
        isLoggedIn = !string.IsNullOrEmpty(username);
        StateHasChanged();
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }

    private async Task Logout()
    {
        await Auth.Logout();
        isLoggedIn = false;
        showDropdown = false;
        if (AuthProvider is CustomAuthenticationStateProvider custom)
        {
            custom.NotifyAuthenticationChanged();
        }
        Navigation.NavigateTo("/login");
    }
    // Dispose method to remove event listener
    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchEvents();
        }
    }

    private void SearchEvents()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            Navigation.NavigateTo($"/events?search={Uri.EscapeDataString(searchTerm)}");
        }
    }

    private void ClearSearch()
    {
        searchTerm = "";
    }

    public void Dispose()
    {
        Auth.AuthStateChanged -= OnAuthStateChanged;
    }
}